#!/bin/bash

# utils.sh - bootstrap_to_shoestring.sh „ÅÆ„Åü„ÇÅ„ÅÆ‰æøÂà©„Å™Èñ¢Êï∞
# „É≠„Ç∞„ÄÅÁí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ„ÄÅYAML Ëß£Êûê„ÄÅ„É¶„Éº„Ç∂„ÉºÂØæË©±„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åô„ÄÇ
#
# ‰ΩúÊàêËÄÖ: mikun (@mikunNEM, 2025-06-05)
# „Éê„Éº„Ç∏„Éß„É≥: 2025-06-07-v5

set -e

# „Ç´„É©„Éº„Ç≥„Éº„Éâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# „É≠„Ç∞„ÇíË®òÈå≤„Åô„ÇãÈñ¢Êï∞
log() {
    local message="$1"
    local level="${2:-INFO}"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_file="${SHOESTRING_DIR:-$HOME/work/shoestring}/setup.log"
    mkdir -p "$(dirname "$log_file")" 2>/dev/null || true
    # ÁâπÊÆäÊñáÂ≠ó„Çí„Ç®„Çπ„Ç±„Éº„Éó
    local escaped_message=$(printf '%s' "$message" | sed 's/["$`\\]/\\&/g')
    echo "[$timestamp] [$level] $escaped_message" >> "$log_file" 2>/dev/null
    echo "[$timestamp] [$level] $escaped_message" >&2
}

# „Ç®„É©„Éº„ÅßÁµÇ‰∫Ü„Åô„ÇãÈñ¢Êï∞
error_exit() {
    local message="$1"
    local code="${2:-1}"
    echo -e "${RED}‚ùå „Ç®„É©„Éº: $message${NC}" >&2
    log "$message" "ERROR"
    echo -e "${BLUE}üí° Ëß£Ê±∫„ÅÆ„Éí„É≥„Éà:${NC}" >&2
    echo "  - „É≠„Ç∞„ÇíÁ¢∫Ë™ç: cat ${SHOESTRING_DIR:-$HOME/work/shoestring}/setup.log" >&2
    echo "  - „Éá„Ç£„Çπ„ÇØÂÆπÈáè: df -h" >&2
    echo "  - Ê®©Èôê: ls -ld ${SHOESTRING_DIR:-$HOME/work/shoestring}" >&2
    echo "  - YAMLÁ¢∫Ë™ç: head -n 20 ${ADDRESSES_YML:-/home/mikun/work/symbol-bootstrap/target/addresses.yml}" >&2
    echo "  - „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: ping -c 4 github.com; curl -v https://github.com" >&2
    echo "  - ÁøªË®≥„Ç®„É©„Éº: cat ${SHOESTRING_DIR:-$HOME/work/shoestring}/shoestring-env/lib/python3.12/site-packages/shoestring/__main__.py | grep -A 5 'lang ='" >&2
    echo "  - „Çπ„ÇØ„É™„Éó„ÉàÊßãÊñá: bash -n utils.sh; grep -n \"'\" utils.sh" >&2
    echo "  - „Çµ„Éù„Éº„Éà: https://x.com/mikunNEM" >&2
    exit "$code"
}

# ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}" >&2
    log "$1" "INFO"
}

# Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏
print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}" >&2
    log "$1" "WARNING"
}

# ÊÉÖÂ†±„É°„ÉÉ„Çª„Éº„Ç∏
print_info() {
    local message="$1"
    echo -e "${BLUE}‚ÑπÔ∏è $message${NC}" >&2
    log "$message" "INFO"
}

# „É¶„Éº„Ç∂„Éº„Å´ÂÖ•Âäõ„ÇíÊ±Ç„ÇÅ„Çã
ask_user() {
    local question="$1"
    local default="$2"
    local is_path="${3:-}"
    local response

    echo -e "${BLUE}$question${NC}" >&2
    if [ -n "$default" ]; then
        echo -e "${BLUE}„Éá„Éï„Ç©„É´„ÉàÔºàEnter„ÅßÈÅ∏ÊäûÔºâ: $default${NC}" >&2
    fi

    while true; do
        read -r response
        if [ -z "$response" ] && [ -n "$default" ]; then
            response="$default"
        fi
        if [ -z "$response" ]; then
            echo -e "${RED}‚ùå ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ${NC}" >&2
            continue
        fi
        if [ "$is_path" = "path" ]; then
            response=$(expand_tilde "$response")
            if [[ ! "$response" =~ ^/ ]]; then
                response="$(pwd)/$response"
            fi
            response=$(echo "$response" | xargs)
            if [[ "$response" =~ \[.*\] || "$response" =~ \' || "$response" =~ \" ]]; then
                echo -e "${RED}‚ùå ÁÑ°Âäπ„Å™„Éë„Çπ„Å†„ÇàÔºÅÔºàÁâπÊÆäÊñáÂ≠ó„ÇÑ„É≠„Ç∞„Å£„ÅΩ„ÅÑ„ÅÆ„ÅØ„ÉÄ„É°Ôºâ${NC}" >&2
                continue
            fi
        fi
        printf "%s" "$response"
        log "„É¶„Éº„Ç∂„ÉºÂÖ•Âäõ: Ë≥™Âïè='$question', ÂõûÁ≠î='$response'" "DEBUG"
        break
    done
}

# „ÉÅ„É´„ÉÄÂ±ïÈñã
expand_tilde() {
    local response="$1"
    if [[ -n "$response" ]]; then
        log "Tilde expansion before: $response" "DEBUG"
        response="${response/#~/$HOME}"
        log "Tilde expansion after: $response" "DEBUG"
    else
        log "Tilde expansion skipped: empty response" "DEBUG"
    fi
    echo "$response"
}

# Á¢∫Ë™ç„Éó„É≠„É≥„Éó„Éà
confirm() {
    local question="$1"
    local response

    while true; do
        echo -e "${YELLOW}$questionÔºày/nÔºâ: ${NC}"
        read -r response
        if [ -z "$response" ]; then
            return 0
        fi
        case $response in
            [Yy]*) return 0 ;;
            [Nn]*) return 1 ;;
            *) echo "y „Åã n „ÅßÁ≠î„Åà„Å¶„Å≠ÔºÅ" >&2 ;;
        esac
    done
}

# „Ç≥„Éû„É≥„Éâ„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
check_command() {
    if ! command -v "$1" &>/dev/null; then
        error_exit "$1 „ÅåÂøÖË¶Å„Åß„ÅôÔºÅ„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    fi
}

# YAML „Éï„Ç°„Ç§„É´„ÇíËß£ÊûêÔºà„Éç„Çπ„ÉàÂØæÂøúÔºâ
parse_yaml() {
    local file="$1"
    local key="$2"
    if [ ! -f "$file" ]; then
        error_exit "YAML „Éï„Ç°„Ç§„É´ $file „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
    fi
    log "parse_yaml: „Éï„Ç°„Ç§„É´=$file, „Ç≠„Éº=$key" "DEBUG"
    
    if command -v yq &>/dev/null; then
        local result=$(yq eval ".nodes[0].${key}.privateKey" "$file" 2>> "${SHOESTRING_DIR:-$HOME/work/shoestring}/setup.log")
        if [[ "$result" != "null" && -n "$result" ]]; then
            log "yq ÁµêÊûú: $result" "DEBUG"
            echo "$result"
            return 0
        fi
        log "yq „Åß„Ç≠„Éº $key „ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ" "DEBUG"
    else
        log "yq Êú™„Ç§„É≥„Çπ„Éà„Éº„É´„ÄÅgrep „Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ" "DEBUG"
    fi
    
    local line=$(grep -A 10 "^[[:space:]]*${key}:" "$file" | grep privateKey | head -n 1 | sed -e 's/^[[:space:]]*privateKey:[[:space:]]*//' -e 's/[[:space:]]*$//')
    log "grep ÁµêÊûú: $line" "DEBUG"
    if [[ -n "$line" ]]; then
        echo "$line"
    else
        error_exit "${key} „ÅÆ privateKey „ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Çà"
    fi
}

# „Éï„Ç°„Ç§„É´„ÅÆÊ§úË®º
validate_file() {
    local file="$1"
    if [ ! -f "$file" ]; then
        error_exit "„Éï„Ç°„Ç§„É´ $file „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
    fi
}

# „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÊ§úË®º
validate_dir() {
    local dir="$1"
    if [ ! -d "$dir" ]; then
        error_exit "„Éá„Ç£„É¨„ÇØ„Éà„É™ $dir „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ"
    fi
}

# „Éá„Ç£„Çπ„ÇØÂÆπÈáè„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà1GB ‰ª•‰∏äÔºâ
check_disk_space() {
    local dir="$1"
    local min_space_mb=1000
    local free_space=$(df -m "$dir" | tail -1 | awk '{print $4}')
    if [ "$free_space" -lt "$min_space_mb" ]; then
        error_exit "$dir „ÅÆ„Éá„Ç£„Çπ„ÇØÂÆπÈáè„Åå‰∏çË∂≥: ${free_space}MBÔºà${min_space_mb}MB ÂøÖË¶ÅÔºâ"
    fi
    print_info "$dir „ÅÆ„Éá„Ç£„Çπ„ÇØÂÆπÈáè: ${free_space}MB"
    log "„Éá„Ç£„Çπ„ÇØÂÆπÈáè„ÉÅ„Çß„ÉÉ„ÇØOK: ${free_space}MB" "DEBUG"
}

# Python „Éê„Éº„Ç∏„Éß„É≥„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà3.10 ‰ª•‰∏äÔºâ
check_python_version() {
    local min_version="3.10"
    local python_version=$(python3 --version | cut -d' ' -f2)
    if [ "$(echo -e "$python_version\n$min_version" | sort -V | head -n1)" != "$min_version" ]; then
        error_exit "Python $min_version ‰ª•‰∏ä„ÅåÂøÖË¶ÅÔºàÁèæÂú®: $python_versionÔºâ"
    fi
    print_info "Python „Éê„Éº„Ç∏„Éß„É≥: $python_version"
    log "Python „Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØOK: $python_version" "DEBUG"
}

# ‰ªÆÊÉ≥Áí∞Â¢É„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
check_venv_optional() {
    local venv_dir="$1"
    if [ ! -f "${venv_dir}/bin/activate" ]; then
        print_warning "‰ªÆÊÉ≥Áí∞Â¢É„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${venv_dir}„ÄÇÂæå„Åß‰ΩúÊàê„Åï„Çå„Åæ„Åô„ÄÇ"
        return 1
    fi
    
    # ‰ªÆÊÉ≥Áí∞Â¢É„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà„Åó„Å¶„ÉÅ„Çß„ÉÉ„ÇØ
    set +e
    source "${venv_dir}/bin/activate"
    local activate_result=$?
    set -e
    
    if [ $activate_result -ne 0 ]; then
        print_warning "‰ªÆÊÉ≥Áí∞Â¢É„ÅÆÊúâÂäπÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇÂæå„ÅßÂÜç‰ΩúÊàê„Åï„Çå„Åæ„Åô„ÄÇ"
        return 1
    fi
    
    if ! pip show symbol-shoestring &>/dev/null; then
        print_warning "symbol-shoestring „ÅåÊú™„Ç§„É≥„Çπ„Éà„Éº„É´„ÄÇÂæå„Åß„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Åæ„Åô„ÄÇ"
        deactivate
        return 1
    fi
    
    local package_version=$(pip show symbol-shoestring | grep Version | cut -d' ' -f2)
    print_success "‰ªÆÊÉ≥Áí∞Â¢ÉOK: symbol-shoestring v${package_version}"
    log "‰ªÆÊÉ≥Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØOK: symbol-shoestring v${package_version}" "DEBUG"
    deactivate
    return 0
}

# Êõ∏„ÅçËæº„ÅøÊ®©Èôê„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
check_write_permission() {
    local dir="$1"
    if ! touch "${dir}/.write_test" 2>/dev/null; then
        error_exit "$dir „Å´Êõ∏„ÅçËæº„ÅøÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"
    fi
    rm -f "${dir}/.write_test"
    print_info "$dir „ÅÆÊõ∏„ÅçËæº„ÅøÊ®©ÈôêOK"
    log "$dir „ÅÆÊõ∏„ÅçËæº„ÅøÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØOK" "DEBUG"
}

# „É≠„Ç∞„ÅÆ„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥
rotate_log() {
    local log_file="${SHOESTRING_DIR:-$HOME/work/shoestring}/setup.log"
    if [ -f "$log_file" ] && [ $(stat -c %s "$log_file" 2>/dev/null || stat -f %z "$log_file") -gt 10485760 ]; then
        mv "$log_file" "$log_file.$(date +%Y%m%d_%H%M%S)"
        print_info "„É≠„Ç∞„Çí„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥: $log_file"
        log "„É≠„Ç∞„Çí„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„Åó„Åæ„Åó„Åü"
    fi
}

export -f log error_exit print_success print_warning print_info ask_user expand_tilde confirm check_command parse_yaml validate_file validate_dir check_disk_space check_python_version check_venv_optional check_write_permission rotate_log
